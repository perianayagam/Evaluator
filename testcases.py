from evaluator import *

#Create Seven Students and Register them for Algebra Class

studentA = Student('Anand')
studentA.begin_course('Algebra')
studentB = Student('Bob')
studentB.begin_course('Algebra')
studentC = Student('Charlie')
studentC.begin_course('Algebra')
studentD = Student('Dravid')
studentD.begin_course('Algebra')
studentE = Student('Eshwar')
studentE.begin_course('Algebra')
studentF = Student('Fred')
studentF.begin_course('Algebra')
studentG = Student('Glen')
studentG.begin_course('Algebra')

#Create Sample Question Templates
#Question(ExpectedAnswerTime, MaximumNumberOfAppearances, IntervalBetweenAppearances, VisibilityTime)
question1= Question(120.0, 100, 20, 360)
question2= Question(100.0, 100, 20, 400)
question3= Question(200.0, 100, 20, 500)
question4= Question(100.0, 100, 20, 360)
question5= Question(150.0, 100, 20, 300)
question6= Question(100.0, 100, 20, 300)
question7= Question(200.0, 100, 20, 400)
question8= Question(200.0, 100, 20, 400)

#Evaluate the students as per the Table 4
#Evaluate StudentA
print("Evaluating {} (StudentA)".format(studentA.name))
metricsA = studentA.answer_correctly_firstattempt(question1)
studentA.evaluator.evaluate(studentA,metricsA)
metricsA = studentA.answer_correctly_firstattempt(question2)
studentA.evaluator.evaluate(studentA,metricsA)
metricsA = studentA.answer_correctly_firstattempt(question3)
studentA.evaluator.evaluate(studentA,metricsA)
metricsA = studentA.answer_correctly_firstattempt(question4)
studentA.evaluator.evaluate(studentA,metricsA)
metricsA = studentA.answer_correctly_firstattempt(question5)
studentA.evaluator.evaluate(studentA,metricsA)
metricsA = studentA.answer_correctly_firstattempt(question6)
studentA.evaluator.evaluate(studentA,metricsA)
metricsA = studentA.answer_correctly_firstattempt(question7)
studentA.evaluator.evaluate(studentA,metricsA)
metricsA = studentA.answer_correctly_firstattempt(question8)
performance_scoreA = studentA.evaluator.evaluate(studentA,metricsA)

#Evaluate StudentB
print("Evaluating {} (StudentB)".format(studentB.name))
metricsB = studentB.answer_correctly_firstattempt(question1)
studentB.evaluator.evaluate(studentB,metricsB)
metricsB = studentB.answer_correctly_firstattempt(question2)
studentB.evaluator.evaluate(studentB,metricsB)
metricsB = studentB.answer_correctly_firstattempt(question3)
studentB.evaluator.evaluate(studentB,metricsB)
metricsB = studentB.answer_correctly_firstattempt(question4) 
studentB.evaluator.evaluate(studentB,metricsB)
metricsB = studentB.answer_correctly_with_iteration(question5)
studentB.evaluator.evaluate(studentB,metricsB)
metricsB = studentB.answer_correctly_with_iteration(question6)
studentB.evaluator.evaluate(studentB,metricsB)
metricsB = studentB.answer_correctly_with_iteration(question7)
studentB.evaluator.evaluate(studentB,metricsB)
metricsB = studentB.answer_correctly_with_iteration(question8)
performance_scoreB = studentB.evaluator.evaluate(studentB,metricsB)

#Evaluate StudentC
print("Evaluating {} (StudentB)".format(studentC.name))
metricsC = studentC.answer_correctly_firstattempt(question1)
studentC.evaluator.evaluate(studentC,metricsC)
metricsC = studentC.answer_correctly_with_iteration(question2)
studentC.evaluator.evaluate(studentC,metricsC)
metricsC = studentC.answer_correctly_firstattempt(question3)
studentC.evaluator.evaluate(studentC,metricsC)
metricsC = studentC.answer_correctly_with_iteration(question4) 
studentC.evaluator.evaluate(studentC,metricsC)
metricsC = studentC.answer_correctly_firstattempt(question5)
studentC.evaluator.evaluate(studentC,metricsC)
metricsC = studentC.answer_correctly_with_iteration(question6)
studentC.evaluator.evaluate(studentC,metricsC)
metricsC = studentC.answer_correctly_firstattempt(question7)
studentC.evaluator.evaluate(studentC,metricsC)
metricsC = studentC.answer_correctly_with_iteration(question8)
performance_scoreC = studentC.evaluator.evaluate(studentC,metricsC)

#Evaluate StudentD
print("Evaluating {} (StudentD)".format(studentD.name))
metricsD = studentD.answer_correctly_with_iteration(question1)
studentD.evaluator.evaluate(studentD,metricsD)
metricsD = studentD.answer_correctly_firstattempt(question2)
studentD.evaluator.evaluate(studentD,metricsD)
metricsD = studentD.answer_correctly_with_iteration(question3)
studentD.evaluator.evaluate(studentD,metricsD)
metricsD = studentD.answer_correctly_firstattempt(question4)
studentD.evaluator.evaluate(studentD,metricsD)
metricsD = studentD.answer_correctly_with_iteration(question5) 
studentD.evaluator.evaluate(studentD,metricsD)
metricsD = studentD.answer_correctly_firstattempt(question6)
studentD.evaluator.evaluate(studentC,metricsC)
metricsD = studentD.answer_correctly_with_iteration(question7)
performance_scoreD = studentD.evaluator.evaluate(studentD,metricsD)

#Evaluate StudentE
print("Evaluating {} (StudentE)".format(studentE.name))
metricsE = studentE.did_not_answer(question1)
studentE.evaluator.evaluate(studentE,metricsE)
metricsE = studentE.did_not_answer(question2)
studentE.evaluator.evaluate(studentE,metricsE)
metricsE = studentE.did_not_answer(question3)
studentE.evaluator.evaluate(studentE,metricsE)
metricsE = studentE.did_not_answer(question4)
studentE.evaluator.evaluate(studentE,metricsE)
metricsE = studentE.did_not_answer(question5) 
studentE.evaluator.evaluate(studentE,metricsE)
metricsE = studentE.answer_correctly_with_iteration(question6)
studentE.evaluator.evaluate(studentE,metricsE)
metricsE = studentE.answer_correctly_firstattempt(question7)
studentE.evaluator.evaluate(studentE,metricsE)
metricsE = studentE.answer_correctly_with_iteration(question8)
performance_scoreE = studentE.evaluator.evaluate(studentE,metricsE)

#Evaluate StudentF
print("Evaluating {} (StudentF)".format(studentF.name))
metricsF = studentF.did_not_answer(question1)
studentF.evaluator.evaluate(studentF,metricsF)
metricsF = studentF.did_not_answer(question2)
studentF.evaluator.evaluate(studentF,metricsF)
metricsF = studentF.did_not_answer(question3)
studentF.evaluator.evaluate(studentF,metricsF)
metricsF = studentF.answer_correctly_with_iteration(question4)
studentF.evaluator.evaluate(studentF,metricsF)
metricsF = studentF.answer_correctly_with_iteration(question5)
studentF.evaluator.evaluate(studentF,metricsF)
metricsF = studentF.answer_correctly_firstattempt(question7)
studentF.evaluator.evaluate(studentF,metricsF)
metricsF = studentF.answer_correctly_firstattempt(question8)
performance_scoreF = studentF.evaluator.evaluate(studentF,metricsF)

#Evaluate StudentG
print("Evaluating {} (StudentG)".format(studentG.name))
metricsG = studentG.did_not_answer(question1)
studentG.evaluator.evaluate(studentG,metricsG)
metricsG = studentG.answer_correctly_firstattempt(question2)
studentG.evaluator.evaluate(studentG,metricsG)
metricsG = studentG.did_not_answer(question3)
studentG.evaluator.evaluate(studentG,metricsG)
metricsG = studentG.answer_correctly_firstattempt(question4)
studentG.evaluator.evaluate(studentG,metricsG)
metricsG = studentG.did_not_answer(question5)
studentG.evaluator.evaluate(studentG,metricsG)
metricsG = studentG.answer_correctly_firstattempt(question6)
studentG.evaluator.evaluate(studentG,metricsG)
metricsG = studentG.did_not_answer(question7)
studentG.evaluator.evaluate(studentG,metricsG)
metricsG = studentG.answer_correctly_firstattempt(question8)
performance_scoreG = studentG.evaluator.evaluate(studentG,metricsG)

#Print the summary of perfoamance score for each of the above students
print("Performance Score  of {} is {}".format(studentA.name, performance_scoreA))
print("Performance Score  of {} is {}".format(studentB.name, performance_scoreB))
print("Performance Score  of {} is {}".format(studentC.name, performance_scoreC))
print("Performance Score  of {} is {}".format(studentD.name, performance_scoreD))
print("Performance Score  of {} is {}".format(studentE.name, performance_scoreE))
print("Performance Score  of {} is {}".format(studentF.name, performance_scoreF))
print("Performance Score  of {} is {}".format(studentG.name, performance_scoreG))







